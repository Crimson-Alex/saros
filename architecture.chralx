// This file specifies the architecture for saros.
// We have a set of components which are represented
// by java-packages, and a set of connectors which 
// show which component is allowed to access which 
// component.
//
// Given two components A and B, 
// 1) 'A <=> B' means A and component_B can call each 
// other (i.e. classes in A can use imports from B 
// and vice-versa).
//
// 2) 'A => B' means A can call B. However if B tries to 
// call A, an issue will be raised during the Sonarqube 
// analysis.
//
// 3) If A and B aren't in any relation, and one component
// tries to call the other, an issue will be raised during 
// the analysis.
// 
// 4) For packages not defined as components here, any
// package can access any other package. Not ideal, but 
// this is still a WIP.

root saros: de.fu_berlin.inf.dpp

component ui: de.fu_berlin.inf.dpp.ui
component invitation: de.fu_berlin.inf.dpp.negotiation
component session_management: de.fu_berlin.inf.dpp.session
component operational_transformation: de.fu_berlin.inf.dpp.concurrent
component network: de.fu_berlin.inf.dpp.net 

session_management => ui
session_management => operational_transformation
session_management => network
session_management => invitation
ui => invitation
invitation => network

