package de.fu_berlin.inf.dpp.startup;

import org.easymock.EasyMock;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.easymock.PowerMock;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import de.fu_berlin.inf.dpp.StartupSaros;
import de.fu_berlin.inf.dpp.accountManagement.XMPPAccountStore;
import de.fu_berlin.inf.dpp.context.TestSaros;
import de.fu_berlin.inf.dpp.preferences.PreferenceConstants;
import de.fu_berlin.inf.dpp.ui.util.WizardUtils;

@RunWith(PowerMockRunner.class)
@PrepareForTest(WizardUtils.class)
public class WizardOpenTest {

    private TestSaros saros;

    @Before
    public void setUp() {
        saros = new TestSaros();
    }

    @Test
    public void testOpenGettingStartedWizardActiveAccountPresent() {

        StartupSaros startup = new StartupSaros();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock.expect(WizardUtils.openSarosGettingStartedWizard(false))
            .andReturn(null);

        WizardUtils.openSarosConfigurationWizard();

        PowerMock
            .expectLastCall()
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);

        XMPPAccountStore accountStore = saros.getContext().getComponent(
            XMPPAccountStore.class);
        accountStore.createNewAccount("foo", "bar", "bla");
        accountStore.setAccountActive(accountStore.getAllAccounts().get(0));

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    public void testOpenGettingStartedWizardActiveNoAccountPresent() {
        StartupSaros startup = new StartupSaros();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock.expect(WizardUtils.openSarosGettingStartedWizard(true))
            .andReturn(null);

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    public void testOpenConfigurationWizardWithFinishedTutorial() {

        StartupSaros startup = new StartupSaros();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock
            .expect(
                WizardUtils.openSarosGettingStartedWizard(EasyMock.anyBoolean()))
            .andThrow(
                new IllegalStateException("Getting Started Wizard has opened"))
            .anyTimes();

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);

        saros.getPreferenceStore().setValue(
            PreferenceConstants.GETTING_STARTED_FINISHED, true);

        startup.earlyStartup();

        PowerMock.verifyAll();

    }

    @Test
    public void testWizardWithFinishedTutorialAndActiveAccount() {
        StartupSaros startup = new StartupSaros();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock
            .expect(
                WizardUtils.openSarosGettingStartedWizard(EasyMock.anyBoolean()))
            .andThrow(
                new IllegalStateException("Getting Started Wizard has opened"))
            .anyTimes();

        WizardUtils.openSarosConfigurationWizard();

        PowerMock
            .expectLastCall()
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);

        saros.getPreferenceStore().setValue(
            PreferenceConstants.GETTING_STARTED_FINISHED, true);

        XMPPAccountStore accountStore = saros.getContext().getComponent(
            XMPPAccountStore.class);
        accountStore.createNewAccount("foo", "bar", "bla");
        accountStore.setAccountActive(accountStore.getAllAccounts().get(0));

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

}
