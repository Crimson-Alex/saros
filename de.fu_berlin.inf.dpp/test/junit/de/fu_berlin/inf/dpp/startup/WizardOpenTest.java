package de.fu_berlin.inf.dpp.startup;

import java.lang.reflect.Field;

import org.easymock.EasyMock;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.easymock.PowerMock;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import de.fu_berlin.inf.dpp.Saros;
import de.fu_berlin.inf.dpp.SarosPluginContext;
import de.fu_berlin.inf.dpp.StartupSaros;
import de.fu_berlin.inf.dpp.accountManagement.XMPPAccountStore;
import de.fu_berlin.inf.dpp.preferences.PreferenceUtils;
import de.fu_berlin.inf.dpp.test.util.MemoryPreferenceStore;
import de.fu_berlin.inf.dpp.test.util.MemorySecurePreferences;
import de.fu_berlin.inf.dpp.ui.SarosUI;
import de.fu_berlin.inf.dpp.ui.util.WizardUtils;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ WizardUtils.class, SarosPluginContext.class })
public class WizardOpenTest {

    XMPPAccountStore store;

    @Before
    public void setUp() {
        store = new XMPPAccountStore(new MemoryPreferenceStore(),
            new MemorySecurePreferences());
    }

    private void injectObjects(StartupSaros startup, Saros saros,
        SarosUI sarosUI, XMPPAccountStore xmppAccountStore,
        PreferenceUtils preferenceUtils) throws Exception {
        Field f;

        f = startup.getClass().getDeclaredField("saros");
        f.setAccessible(true);
        f.set(startup, saros);

        f = startup.getClass().getDeclaredField("sarosUI");
        f.setAccessible(true);
        f.set(startup, sarosUI);

        f = startup.getClass().getDeclaredField("xmppAccountStore");
        f.setAccessible(true);
        f.set(startup, xmppAccountStore);

        f = startup.getClass().getDeclaredField("preferenceUtils");
        f.setAccessible(true);
        f.set(startup, preferenceUtils);
    }

    @Test
    @Ignore("needs fixing")
    public void testOpenGettingStartedWizardActiveAccountPresent()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        EasyMock
            .expect(WizardUtils.openSarosConfigurationWizard())
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        PreferenceUtils preferenceUtilsMock = EasyMock
            .createMock(PreferenceUtils.class);

        Saros sarosMock = EasyMock.createMock(Saros.class);

        EasyMock.expect(sarosMock.getPreferenceStore())
            .andReturn(new MemoryPreferenceStore()).anyTimes();

        EasyMock.expect(sarosMock.getSecurePrefs())
            .andReturn(new MemorySecurePreferences()).anyTimes();

        store.createAccount("a", "a", "a", "a", 1, true, true);

        PowerMock.replayAll(preferenceUtilsMock, sarosMock);

        StartupSaros startup = new StartupSaros();

        injectObjects(startup, sarosMock, null, store, preferenceUtilsMock);

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    @Ignore("needs fixing")
    public void testOpenGettingStartedWizardActiveNoAccountPresent()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        PreferenceUtils preferenceUtilsMock = EasyMock
            .createMock(PreferenceUtils.class);

        Saros sarosMock = EasyMock.createMock(Saros.class);

        EasyMock.expect(sarosMock.getPreferenceStore())
            .andReturn(new MemoryPreferenceStore()).anyTimes();
        EasyMock.expect(sarosMock.getSecurePrefs())
            .andReturn(new MemorySecurePreferences()).anyTimes();

        PowerMock.replayAll(preferenceUtilsMock, sarosMock);

        StartupSaros startup = new StartupSaros();

        injectObjects(startup, sarosMock, null, store, preferenceUtilsMock);

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    @Ignore("needs fixing")
    public void testOpenConfigurationWizardWithFinishedTutorial()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        PreferenceUtils preferenceUtilsMock = EasyMock
            .createMock(PreferenceUtils.class);

        Saros sarosMock = EasyMock.createMock(Saros.class);

        EasyMock.expect(sarosMock.getPreferenceStore())
            .andReturn(new MemoryPreferenceStore()).anyTimes();
        EasyMock.expect(sarosMock.getSecurePrefs())
            .andReturn(new MemorySecurePreferences()).anyTimes();

        PowerMock.replayAll(preferenceUtilsMock, sarosMock);

        StartupSaros startup = new StartupSaros();

        injectObjects(startup, sarosMock, null, store, preferenceUtilsMock);

        startup.earlyStartup();

        PowerMock.verifyAll();

    }

    @Test
    @Ignore("needs fixing")
    public void testWizardWithFinishedTutorialAndActiveAccount()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock
            .expect(WizardUtils.openSarosConfigurationWizard())
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        store.createAccount("a", "a", "a", "a", 1, true, true);

        PreferenceUtils preferenceUtilsMock = EasyMock
            .createMock(PreferenceUtils.class);

        Saros sarosMock = EasyMock.createMock(Saros.class);

        EasyMock.expect(sarosMock.getPreferenceStore())
            .andReturn(new MemoryPreferenceStore()).anyTimes();
        EasyMock.expect(sarosMock.getSecurePrefs())
            .andReturn(new MemorySecurePreferences()).anyTimes();

        PowerMock.replayAll(preferenceUtilsMock, sarosMock);

        StartupSaros startup = new StartupSaros();

        injectObjects(startup, sarosMock, null, store, preferenceUtilsMock);

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

}
