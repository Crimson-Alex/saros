package de.fu_berlin.inf.dpp.startup;

import static org.junit.Assert.assertEquals;

import org.easymock.EasyMock;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.easymock.PowerMock;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import de.fu_berlin.inf.dpp.SarosPluginContext;
import de.fu_berlin.inf.dpp.StartupSaros;
import de.fu_berlin.inf.dpp.accountManagement.XMPPAccountStore;
import de.fu_berlin.inf.dpp.context.TestSaros;
import de.fu_berlin.inf.dpp.preferences.PreferenceConstants;
import de.fu_berlin.inf.dpp.ui.util.WizardUtils;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ WizardUtils.class, SarosPluginContext.class })
public class WizardOpenTest {

    private TestSaros saros;

    @Before
    public void setUp() {
        saros = new TestSaros();
    }

    @Test
    public void testOpenGettingStartedWizardActiveAccountPresent()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        EasyMock.expect(WizardUtils.openSarosGettingStartedWizard(false))
            .andReturn(null);

        EasyMock
            .expect(WizardUtils.openSarosConfigurationWizard())
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        XMPPAccountStore accountStore = saros.getContext().getComponent(
            XMPPAccountStore.class);

        assertEquals(saros.getContext().getComponent(XMPPAccountStore.class),
            saros.getContext().getComponent(XMPPAccountStore.class));

        accountStore.createAccount("foo", "bar", "bla");

        StartupSaros startup = new StartupSaros();
        saros.getContext().reinject(startup);

        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    public void testOpenGettingStartedWizardActiveNoAccountPresent()
        throws Exception {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock.expect(WizardUtils.openSarosGettingStartedWizard(true))
            .andReturn(null);

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        StartupSaros startup = new StartupSaros();
        saros.getContext().reinject(startup);
        startup.earlyStartup();

        PowerMock.verifyAll();
    }

    @Test
    public void testOpenConfigurationWizardWithFinishedTutorial() {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock
            .expect(
                WizardUtils.openSarosGettingStartedWizard(EasyMock.anyBoolean()))
            .andThrow(
                new IllegalStateException("Getting Started Wizard has opened"))
            .anyTimes();

        EasyMock.expect(WizardUtils.openSarosConfigurationWizard()).andReturn(
            null);

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        saros.getPreferenceStore().setValue(
            PreferenceConstants.GETTING_STARTED_FINISHED, true);

        StartupSaros startup = new StartupSaros();
        saros.getContext().reinject(startup);
        startup.earlyStartup();

        PowerMock.verifyAll();

    }

    @Test
    public void testWizardWithFinishedTutorialAndActiveAccount() {

        PowerMock.mockStatic(WizardUtils.class);
        PowerMock.mockStaticPartial(SarosPluginContext.class, "reinject");

        SarosPluginContext.reinject(EasyMock.anyObject());
        EasyMock.expectLastCall().asStub();

        PowerMock.mockStatic(WizardUtils.class);

        EasyMock
            .expect(
                WizardUtils.openSarosGettingStartedWizard(EasyMock.anyBoolean()))
            .andThrow(
                new IllegalStateException("Getting Started Wizard has opened"))
            .anyTimes();

        EasyMock
            .expect(WizardUtils.openSarosConfigurationWizard())
            .andThrow(
                new IllegalStateException(
                    "Saros Configuration Wizard has opened")).anyTimes();

        PowerMock.replay(WizardUtils.class);
        PowerMock.replay(SarosPluginContext.class);

        saros.getPreferenceStore().setValue(
            PreferenceConstants.GETTING_STARTED_FINISHED, true);

        XMPPAccountStore accountStore = saros.getContext().getComponent(
            XMPPAccountStore.class);

        accountStore.createAccount("foo", "bar", "bla");

        StartupSaros startup = new StartupSaros();
        saros.getContext().reinject(startup);
        startup.earlyStartup();

        PowerMock.verifyAll();
    }

}
