### Eclipse Workspace Patch 1.0
#P Saros
Index: src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityReceiver.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityReceiver.java	(revision 2677)
+++ src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityReceiver.java	(working copy)
@@ -67,6 +67,10 @@
         // do nothing
     }
 
+    public void receive(SXEMessageActivity sxeActivity) {
+        // do nothing
+    }
+
     /**
      * Returns a IActivityConsumer from the given IActivityReceiver which
      * returns the given value for all calls to consume after calling receive on
@@ -151,6 +155,11 @@
                 receiver.receive(changeColorActivity);
                 return consume;
             }
+
+            public boolean consume(SXEMessageActivity sxeActivity) {
+                receiver.receive(sxeActivity);
+                return consume;
+            }
         };
     }
 }
Index: src/de/fu_berlin/inf/dpp/activities/serializable/SXEMessageActivityDataObject.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/serializable/SXEMessageActivityDataObject.java	(revision 0)
+++ src/de/fu_berlin/inf/dpp/activities/serializable/SXEMessageActivityDataObject.java	(revision 0)
@@ -0,0 +1,91 @@
+/*
+ * DPP - Serious Distributed Pair Programming
+ * (c) Freie Universitaet Berlin - Fachbereich Mathematik und Informatik - 2006
+ * (c) Riad Djemili - 2006
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 1, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+package de.fu_berlin.inf.dpp.activities.serializable;
+
+import com.thoughtworks.xstream.annotations.XStreamAlias;
+import com.thoughtworks.xstream.annotations.XStreamConverter;
+
+import de.fu_berlin.inf.dpp.activities.business.IActivity;
+import de.fu_berlin.inf.dpp.activities.business.SXEMessageActivity;
+import de.fu_berlin.inf.dpp.net.JID;
+import de.fu_berlin.inf.dpp.project.ISarosSession;
+import de.fu_berlin.inf.dpp.util.xstream.UrlEncodingStringConverter;
+
+/**
+ * An immutable XML activityDataObject.
+ * 
+ * @author jurke
+ */
+@XStreamAlias("xmlActivity")
+public class SXEMessageActivityDataObject extends AbstractActivityDataObject {
+
+    @XStreamConverter(UrlEncodingStringConverter.class)
+    private String content;
+
+    /**
+     * 
+     * @param source
+     * @param elementID
+     * @param propertyName
+     * @param value
+     * @param extendedValues
+     *            nullable
+     */
+    public SXEMessageActivityDataObject(JID source, String content) {
+        super(source);
+
+        this.content = content;
+
+    }
+
+    @Override
+    public String toString() {
+        return "XMLActivityDataObject(src:" + this.source + ")";
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = super.hashCode();
+        result = prime * result + content.hashCode();
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (!super.equals(obj))
+            return false;
+        if (!(obj instanceof SXEMessageActivityDataObject))
+            return false;
+
+        SXEMessageActivityDataObject other = (SXEMessageActivityDataObject) obj;
+
+        if (!content.equals(other.content))
+            return false;
+
+        return true;
+    }
+
+    public IActivity getActivity(ISarosSession sharedProject) {
+        return new SXEMessageActivity(sharedProject.getUser(source), content);
+    }
+}
Index: src/de/fu_berlin/inf/dpp/activities/business/IActivityReceiver.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/business/IActivityReceiver.java	(revision 2677)
+++ src/de/fu_berlin/inf/dpp/activities/business/IActivityReceiver.java	(working copy)
@@ -41,4 +41,6 @@
     void receive(VCSActivity activity);
 
     void receive(ChangeColorActivity changeColorActivity);
+
+    void receive(SXEMessageActivity sxeActivity);
 }
Index: src/de/fu_berlin/inf/dpp/activities/business/IActivityConsumer.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/business/IActivityConsumer.java	(revision 2677)
+++ src/de/fu_berlin/inf/dpp/activities/business/IActivityConsumer.java	(working copy)
@@ -41,4 +41,6 @@
     boolean consume(VCSActivity vcsActivity);
 
     boolean consume(ChangeColorActivity changeColorActivity);
+
+    boolean consume(SXEMessageActivity sxeActivity);
 }
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 2677)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -84,6 +84,7 @@
    org.osgi.framework,
    org.jivesoftware.smackx,
    de.fu_berlin.inf.dpp.net",
+ de.fu_berlin.inf.dpp.activities.business,
  de.fu_berlin.inf.dpp.concurrent,
  de.fu_berlin.inf.dpp.concurrent.jupiter,
  de.fu_berlin.inf.dpp.concurrent.jupiter.internal,
@@ -175,6 +176,82 @@
    org.eclipse.swt.widgets,
    de.fu_berlin.inf.dpp.invitation",
  de.fu_berlin.inf.dpp.util;uses:="org.eclipse.core.resources,org.jivesoftware.smack.packet",
+ org.apache.log4j,
+ org.jivesoftware.smack;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.debugger;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.filter;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.packet;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.provider;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.proxy;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.sasl;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.util;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smack.util.collections;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.bookmark;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.commands;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.filetransfer;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.listeners;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.media;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.demo;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.jmf;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.jspeex;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.multi;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.sshare;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.sshare.api;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.mediaimpl.test;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.jingle.nat;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.muc;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.packet;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.provider;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.search;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.agent;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.ext.forms;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.ext.history;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.ext.macros;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.ext.notes;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.packet;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.settings;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.user;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.jivesoftware.smackx.workgroup.util;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.collection;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.common;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.concurrent;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.i18n;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.inject;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.inspection;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.io;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.lifecycle;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.listener;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio.channel;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio.observer;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio.ssl;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio.statemachine;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.nio.timeout;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.rudp;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.rudp.messages;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.rudp.messages.impl;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.service;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.limewire.util;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.adapters;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.annotations;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.behaviors;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.classname;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.containers;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.injectors;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.lifecycle;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.monitors;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.parameters;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.paranamer;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.references;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.security;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.picocontainer.visitors;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.xmlpull.mxp1;x-friends:="de.fu_berlin.inf.dpp.test",
+ org.xmlpull.v1;x-friends:="de.fu_berlin.inf.dpp.test",
  org.jivesoftware.smack,
  org.jivesoftware.smack.debugger,
  org.jivesoftware.smack.filter,
Index: .classpath
===================================================================
--- .classpath	(revision 2677)
+++ .classpath	(working copy)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry exported="true" kind="lib" path="lib/log4j-1.2.15.jar" sourcepath="lib/log4j-1.2.15-sources.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/org.eclipse.swtbot.ant.optional.junit4_2.0.0.595-dev-e36.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/org.eclipse.swtbot.eclipse.ui_2.0.0.595-dev-e36.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/org.eclipse.swtbot.swt.finder_2.0.0.595-dev-e36.jar"/>
@@ -14,7 +15,6 @@
 	<classpathentry kind="src" path="ext-src"/>
 	<classpathentry kind="src" path="test/src"/>
 	<classpathentry exported="true" kind="lib" path="bin" sourcepath="bin"/>
-	<classpathentry kind="lib" path="lib/log4j-1.2.15.jar" sourcepath="lib/log4j-1.2.15-sources.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/smack.jar" sourcepath="lib/smack_src_3_1_0_saros.zip"/>
 	<classpathentry exported="true" kind="lib" path="lib/smackx.jar" sourcepath="lib/smack_src_3_1_0_saros.zip"/>
 	<classpathentry exported="true" kind="lib" path="lib/smackx-debug.jar"/>
Index: src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityConsumer.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityConsumer.java	(revision 2677)
+++ src/de/fu_berlin/inf/dpp/activities/business/AbstractActivityConsumer.java	(working copy)
@@ -83,6 +83,11 @@
         return false;
     }
 
+    public boolean consume(SXEMessageActivity sxeActivity) {
+        // empty implementation
+        return false;
+    }
+
     /**
      * Utility method for converting a IActivityConsumer into an
      * IActivityReceiver (the result from the calls to consume are ignored)
@@ -149,6 +154,10 @@
             public void receive(ChangeColorActivity changeColorActivity) {
                 consumer.consume(changeColorActivity);
             }
+
+            public void receive(SXEMessageActivity sxeActivity) {
+                consumer.consume(sxeActivity);
+            }
         };
     }
 }
Index: src/de/fu_berlin/inf/dpp/activities/business/SXEMessageActivity.java
===================================================================
--- src/de/fu_berlin/inf/dpp/activities/business/SXEMessageActivity.java	(revision 0)
+++ src/de/fu_berlin/inf/dpp/activities/business/SXEMessageActivity.java	(revision 0)
@@ -0,0 +1,33 @@
+package de.fu_berlin.inf.dpp.activities.business;
+
+import de.fu_berlin.inf.dpp.User;
+import de.fu_berlin.inf.dpp.activities.serializable.IActivityDataObject;
+import de.fu_berlin.inf.dpp.activities.serializable.SXEMessageActivityDataObject;
+import de.fu_berlin.inf.dpp.project.ISarosSession;
+
+public class SXEMessageActivity extends AbstractActivity {
+
+    private String content;
+
+    public SXEMessageActivity(User source, String content) {
+        super(source);
+        this.content = content;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public boolean dispatch(IActivityConsumer consumer) {
+        return consumer.consume(this);
+    }
+
+    public void dispatch(IActivityReceiver receiver) {
+        receiver.receive(this);
+    }
+
+    public IActivityDataObject getActivityDataObject(ISarosSession sharedProject) {
+        return new SXEMessageActivityDataObject(source.getJID(), content);
+    }
+
+}
